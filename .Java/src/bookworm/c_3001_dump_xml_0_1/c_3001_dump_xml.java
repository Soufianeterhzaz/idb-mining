// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bookworm.c_3001_dump_xml_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: c_3001_dump_xml Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.4.0.r110020
 * @status 
 */
public class c_3001_dump_xml implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "c_3001_dump_xml";
	private final String projectName = "BOOKWORM";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							e.getMessage());
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					c_3001_dump_xml.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c_3001_dump_xml.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMongoDBInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tNormalize_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNormalize_1", System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class dateparseStruct implements
			routines.system.IPersistableRow<dateparseStruct> {
		final static byte[] commonByteArrayLock_BOOKWORM_c_3001_dump_xml = new byte[0];
		static byte[] commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[0];

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String author;

		public String getAuthor() {
			return this.author;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		public String autore;

		public String getAutore() {
			return this.autore;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BOOKWORM_c_3001_dump_xml.length) {
					if (length < 1024
							&& commonByteArray_BOOKWORM_c_3001_dump_xml.length == 0) {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[1024];
					} else {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BOOKWORM_c_3001_dump_xml, 0,
						length);
				strReturn = new String(
						commonByteArray_BOOKWORM_c_3001_dump_xml, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BOOKWORM_c_3001_dump_xml) {

				try {

					int length = 0;

					this.url = readString(dis);

					this.author = readString(dis);

					this.title = readString(dis);

					this.description = readString(dis);

					this.comments = readString(dis);

					this.data = readString(dis);

					this.autore = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.url, dos);

				// String

				writeString(this.author, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.comments, dos);

				// String

				writeString(this.data, dos);

				// String

				writeString(this.autore, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("url=" + url);
			sb.append(",author=" + author);
			sb.append(",title=" + title);
			sb.append(",description=" + description);
			sb.append(",comments=" + comments);
			sb.append(",data=" + data);
			sb.append(",autore=" + autore);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dateparseStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_BOOKWORM_c_3001_dump_xml = new byte[0];
		static byte[] commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[0];

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String author;

		public String getAuthor() {
			return this.author;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BOOKWORM_c_3001_dump_xml.length) {
					if (length < 1024
							&& commonByteArray_BOOKWORM_c_3001_dump_xml.length == 0) {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[1024];
					} else {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BOOKWORM_c_3001_dump_xml, 0,
						length);
				strReturn = new String(
						commonByteArray_BOOKWORM_c_3001_dump_xml, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BOOKWORM_c_3001_dump_xml) {

				try {

					int length = 0;

					this.url = readString(dis);

					this.author = readString(dis);

					this.title = readString(dis);

					this.description = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.url, dos);

				// String

				writeString(this.author, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("url=" + url);
			sb.append(",author=" + author);
			sb.append(",title=" + title);
			sb.append(",description=" + description);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class gStruct implements
			routines.system.IPersistableRow<gStruct> {
		final static byte[] commonByteArrayLock_BOOKWORM_c_3001_dump_xml = new byte[0];
		static byte[] commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[0];

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String author;

		public String getAuthor() {
			return this.author;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BOOKWORM_c_3001_dump_xml.length) {
					if (length < 1024
							&& commonByteArray_BOOKWORM_c_3001_dump_xml.length == 0) {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[1024];
					} else {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BOOKWORM_c_3001_dump_xml, 0,
						length);
				strReturn = new String(
						commonByteArray_BOOKWORM_c_3001_dump_xml, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BOOKWORM_c_3001_dump_xml) {

				try {

					int length = 0;

					this.url = readString(dis);

					this.author = readString(dis);

					this.title = readString(dis);

					this.description = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.url, dos);

				// String

				writeString(this.author, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("url=" + url);
			sb.append(",author=" + author);
			sb.append(",title=" + title);
			sb.append(",description=" + description);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(gStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BOOKWORM_c_3001_dump_xml = new byte[0];
		static byte[] commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[0];

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String author;

		public String getAuthor() {
			return this.author;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BOOKWORM_c_3001_dump_xml.length) {
					if (length < 1024
							&& commonByteArray_BOOKWORM_c_3001_dump_xml.length == 0) {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[1024];
					} else {
						commonByteArray_BOOKWORM_c_3001_dump_xml = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BOOKWORM_c_3001_dump_xml, 0,
						length);
				strReturn = new String(
						commonByteArray_BOOKWORM_c_3001_dump_xml, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BOOKWORM_c_3001_dump_xml) {

				try {

					int length = 0;

					this.url = readString(dis);

					this.author = readString(dis);

					this.title = readString(dis);

					this.description = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.url, dos);

				// String

				writeString(this.author, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("url=" + url);
			sb.append(",author=" + author);
			sb.append(",title=" + title);
			sb.append(",description=" + description);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				gStruct g = new gStruct();
				row6Struct row6 = new row6Struct();
				dateparseStruct dateparse = new dateparseStruct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_dateparse = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_dateparse.putIfAbsent("dateparse"
							+ iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_dateparse = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_dateparse
							.get("dateparse" + iterateLoop);
					runStat.updateStatOnConnection("dateparse" + iterateId,
							stats_dateparse.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Users/d6822/Desktop/ibs_strutturato_prova.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[7];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(",");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(",");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
				try {
					CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_2,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_2
							.setSeparator(csvSettings_tFileOutputDelimited_2
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_2
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_2.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_2
										.getRowDelim());
					}

					if (filetFileOutputDelimited_2.length() == 0) {

						headColutFileOutputDelimited_2[0] = "url";

						headColutFileOutputDelimited_2[1] = "author";

						headColutFileOutputDelimited_2[2] = "title";

						headColutFileOutputDelimited_2[3] = "description";

						headColutFileOutputDelimited_2[4] = "comments";

						headColutFileOutputDelimited_2[5] = "data";

						headColutFileOutputDelimited_2[6] = "autore";

						CsvWritertFileOutputDelimited_2
								.writeNext(headColutFileOutputDelimited_2);
						CsvWritertFileOutputDelimited_2.flush();

					}

					CsvWritertFileOutputDelimited_2
							.setEscapeChar(csvSettings_tFileOutputDelimited_2
									.getEscapeChar());
					CsvWritertFileOutputDelimited_2
							.setQuoteChar(csvSettings_tFileOutputDelimited_2
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_2
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());
					currentComponent = "tMap_1";

					if (execStat) {
						java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_row6 = (java.util.concurrent.ConcurrentHashMap) globalMap
								.get("concurrentHashMap");
						concurrentHashMap_row6
								.putIfAbsent(
										"row6" + iterateLoop,
										new java.util.concurrent.atomic.AtomicInteger(
												0));
						java.util.concurrent.atomic.AtomicInteger stats_row6 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_row6
								.get("row6" + iterateLoop);
						runStat.updateStatOnConnection("row6" + iterateId,
								stats_row6.incrementAndGet() <= 1 ? 0 : 1, 0);
					}

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
						int finedata;
						int iniziodata;
						Object matcher;
						boolean find;
						String data;
						String autore;
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					dateparseStruct dateparse_tmp = new dateparseStruct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tNormalize_1 begin ] start
					 */

					ok_Hash.put("tNormalize_1", false);
					start_Hash.put("tNormalize_1", System.currentTimeMillis());
					currentComponent = "tNormalize_1";

					if (execStat) {
						java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_g = (java.util.concurrent.ConcurrentHashMap) globalMap
								.get("concurrentHashMap");
						concurrentHashMap_g
								.putIfAbsent(
										"g" + iterateLoop,
										new java.util.concurrent.atomic.AtomicInteger(
												0));
						java.util.concurrent.atomic.AtomicInteger stats_g = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_g
								.get("g" + iterateLoop);
						runStat.updateStatOnConnection("g" + iterateId,
								stats_g.incrementAndGet() <= 1 ? 0 : 1, 0);
					}

					int tos_count_tNormalize_1 = 0;

					int nb_line_tNormalize_1 = 0;
					String tmp_tNormalize_1 = null;
					StringBuilder currentRecord_tNormalize_1 = null;
					String[] normalizeRecord_tNormalize_1 = null;
					java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();

					/**
					 * [tNormalize_1 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());
					currentComponent = "tMap_2";

					if (execStat) {
						java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_row5 = (java.util.concurrent.ConcurrentHashMap) globalMap
								.get("concurrentHashMap");
						concurrentHashMap_row5
								.putIfAbsent(
										"row5" + iterateLoop,
										new java.util.concurrent.atomic.AtomicInteger(
												0));
						java.util.concurrent.atomic.AtomicInteger stats_row5 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_row5
								.get("row5" + iterateLoop);
						runStat.updateStatOnConnection("row5" + iterateId,
								stats_row5.incrementAndGet() <= 1 ? 0 : 1, 0);
					}

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_2__Struct {
						String com;
						String toglismiley;
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					gStruct g_tmp = new gStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tMongoDBInput_2 begin ] start
					 */

					ok_Hash.put("tMongoDBInput_2", false);
					start_Hash.put("tMongoDBInput_2",
							System.currentTimeMillis());
					currentComponent = "tMongoDBInput_2";

					int tos_count_tMongoDBInput_2 = 0;

					int nb_line_tMongoDBInput_2 = 0;
					com.mongodb.Mongo mongo_tMongoDBInput_2 = null;
					com.mongodb.DB db_tMongoDBInput_2 = null;
					try {
						mongo_tMongoDBInput_2 = new com.mongodb.Mongo(
								"paulo.mongohq.com", 10033);
						db_tMongoDBInput_2 = mongo_tMongoDBInput_2
								.getDB("csdir_crawler");
						db_tMongoDBInput_2.authenticate("csdir",
								"csdir".toCharArray());

						com.mongodb.DBCollection coll_tMongoDBInput_2 = db_tMongoDBInput_2
								.getCollection("guida2");
						com.mongodb.DBObject myQuery_tMongoDBInput_2 = (com.mongodb.DBObject) com.mongodb.util.JSON
								.parse("{}");

						com.mongodb.DBObject fields_tMongoDBInput_2 = new com.mongodb.BasicDBObject();
						com.mongodb.DBCursor cursor_tMongoDBInput_2 = coll_tMongoDBInput_2
								.find(myQuery_tMongoDBInput_2,
										fields_tMongoDBInput_2);

						class DBObjectInputUtil_tMongoDBInput_2 {
							// Get the node value in embedded document,
							// If have no embedded document get root document
							// node.
							public Object getValue(String parentNode,
									String currentName,
									com.mongodb.DBObject dbObject) {
								Object value = null;
								if (dbObject == null) {
									return null;
								}
								if (parentNode == null || "".equals(parentNode)) {
									if (dbObject.get(currentName) != null) {
										value = dbObject.get(currentName);
									}
								} else {
									String objNames[] = objNames = parentNode
											.split("\\.");
									com.mongodb.DBObject currentObj = dbObject;
									for (int i = 0; i < objNames.length; i++) {
										currentObj = (com.mongodb.DBObject) currentObj
												.get(objNames[i]);
										if (currentObj == null) {
											break;
										}
									}
									if (currentObj != null) {
										value = currentObj.get(currentName);
									}
								}
								return value;
							}
						}
						DBObjectInputUtil_tMongoDBInput_2 dbObjectInputUtil_tMongoDBInput_2 = new DBObjectInputUtil_tMongoDBInput_2();
						java.util.Map<String, String> pathMap_tMongoDBInput_2 = new java.util.HashMap<String, String>();
						pathMap_tMongoDBInput_2.put("url", "");
						pathMap_tMongoDBInput_2.put("author", "");
						pathMap_tMongoDBInput_2.put("title", "");
						pathMap_tMongoDBInput_2.put("description", "");
						pathMap_tMongoDBInput_2.put("comments", "");
						while (cursor_tMongoDBInput_2.hasNext()) {
							com.mongodb.DBObject o_tMongoDBInput_2 = cursor_tMongoDBInput_2
									.next();
							nb_line_tMongoDBInput_2++;
							Object valueObj_tMongoDBInput_2 = null;
							valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
									.getValue(
											pathMap_tMongoDBInput_2.get("url"),
											"url", o_tMongoDBInput_2);
							if (valueObj_tMongoDBInput_2 != null
									&& valueObj_tMongoDBInput_2.toString()
											.length() > 0) {
								row5.url = valueObj_tMongoDBInput_2.toString();
							} else {
								row5.url = null;
							}
							valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
									.getValue(pathMap_tMongoDBInput_2
											.get("author"), "author",
											o_tMongoDBInput_2);
							if (valueObj_tMongoDBInput_2 != null
									&& valueObj_tMongoDBInput_2.toString()
											.length() > 0) {
								row5.author = valueObj_tMongoDBInput_2
										.toString();
							} else {
								row5.author = null;
							}
							valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
									.getValue(pathMap_tMongoDBInput_2
											.get("title"), "title",
											o_tMongoDBInput_2);
							if (valueObj_tMongoDBInput_2 != null
									&& valueObj_tMongoDBInput_2.toString()
											.length() > 0) {
								row5.title = valueObj_tMongoDBInput_2
										.toString();
							} else {
								row5.title = null;
							}
							valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
									.getValue(pathMap_tMongoDBInput_2
											.get("description"), "description",
											o_tMongoDBInput_2);
							if (valueObj_tMongoDBInput_2 != null
									&& valueObj_tMongoDBInput_2.toString()
											.length() > 0) {
								row5.description = valueObj_tMongoDBInput_2
										.toString();
							} else {
								row5.description = null;
							}
							valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
									.getValue(pathMap_tMongoDBInput_2
											.get("comments"), "comments",
											o_tMongoDBInput_2);
							if (valueObj_tMongoDBInput_2 != null
									&& valueObj_tMongoDBInput_2.toString()
											.length() > 0) {
								row5.comments = valueObj_tMongoDBInput_2
										.toString();
							} else {
								row5.comments = null;
							}

							/**
							 * [tMongoDBInput_2 begin ] stop
							 */
							/**
							 * [tMongoDBInput_2 main ] start
							 */

							currentComponent = "tMongoDBInput_2";

							tos_count_tMongoDBInput_2++;

							/**
							 * [tMongoDBInput_2 main ] stop
							 */

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.com = (row5.comments == null) ? ""
										: row5.comments;
								Var.toglismiley = StringHandling.EREPLACE(
										StringHandling.EREPLACE(Var.com,
												"\\:\\)", ""), "\\:\\(", "");// ###############################
								// ###############################
								// # Output tables

								g = null;

								// # Output table : 'g'
								g_tmp.url = row5.url;
								g_tmp.author = row5.author;
								g_tmp.title = row5.title;
								g_tmp.description = row5.description;
								g_tmp.comments = StringHandling.EREPLACE(
										StringHandling.EREPLACE(Var.com,
												"\\[ \"", ""), "\"\\]", "");
								g = g_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "g"
							if (g != null) {

								/**
								 * [tNormalize_1 main ] start
								 */

								currentComponent = "tNormalize_1";

								// g
								// g

								if (execStat) {
									runStat.updateStatOnConnection("g"
											+ iterateId, 1, 1);
								}

								if (g.comments != null
										&& g.comments.trim().length() > 0) {
									normalizeRecord_tNormalize_1 = g.comments
											.split("\" , \"", -1);
								} else {
									normalizeRecord_tNormalize_1 = new String[1];
								}

								int lastNoEmptyIndex_tNormalize_1 = normalizeRecord_tNormalize_1.length;
								for (int i_tNormalize_1 = 0; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1; i_tNormalize_1++) {

									currentRecord_tNormalize_1 = new StringBuilder();
									nb_line_tNormalize_1++;
									row6.url = g.url;
									row6.author = g.author;
									row6.title = g.title;
									row6.description = g.description;
									row6.comments = normalizeRecord_tNormalize_1[i_tNormalize_1];

									tos_count_tNormalize_1++;

									/**
									 * [tNormalize_1 main ] stop
									 */

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									// row6
									// row6

									if (execStat) {
										runStat.updateStatOnConnection("row6"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;
										Var.finedata = row6.comments != null ? StringHandling
												.INDEX(row6.comments, ")") : 0;
										Var.iniziodata = row6.comments != null ? StringHandling
												.INDEX(row6.comments, "(") : 0;
										Var.matcher = row6.comments != null ? (Object) java.util.regex.Pattern
												.compile(
														"(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\\d\\d")
												.matcher(row6.comments)
												: null;
										Var.find = Var.matcher != null ? ((java.util.regex.Matcher) Var.matcher)
												.find() : false;
										Var.data = Var.find ? ((java.util.regex.Matcher) Var.matcher)
												.group() : "";
										Var.autore = row6.comments != null
												&& row6.comments.indexOf("("
														+ Var.data + ")") > 0 ? StringHandling
												.BTRIM(row6.comments.substring(
														0,
														row6.comments
																.indexOf("("
																		+ Var.data
																		+ ")")))
												: "";// ###############################
										// ###############################
										// # Output tables

										dateparse = null;

										// # Output table : 'dateparse'
										dateparse_tmp.url = row6.url;
										dateparse_tmp.author = row6.author;
										dateparse_tmp.title = row6.title;
										dateparse_tmp.description = row6.description;
										dateparse_tmp.comments = row6.comments;
										dateparse_tmp.data = Var.data;
										dateparse_tmp.autore = Var.autore;
										dateparse = dateparse_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "dateparse"
									if (dateparse != null) {

										/**
										 * [tFileOutputDelimited_2 main ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										// dateparse
										// dateparse

										if (execStat) {
											runStat.updateStatOnConnection(
													"dateparse" + iterateId, 1,
													1);
										}

										String[] rowtFileOutputDelimited_2 = new String[7];

										rowtFileOutputDelimited_2[0] = dateparse.url == null ? ""
												: dateparse.url;

										rowtFileOutputDelimited_2[1] = dateparse.author == null ? ""
												: dateparse.author;

										rowtFileOutputDelimited_2[2] = dateparse.title == null ? ""
												: dateparse.title;

										rowtFileOutputDelimited_2[3] = dateparse.description == null ? ""
												: dateparse.description;

										rowtFileOutputDelimited_2[4] = dateparse.comments == null ? ""
												: dateparse.comments;

										rowtFileOutputDelimited_2[5] = dateparse.data == null ? ""
												: dateparse.data;

										rowtFileOutputDelimited_2[6] = dateparse.autore == null ? ""
												: dateparse.autore;

										nb_line_tFileOutputDelimited_2++;
										CsvWritertFileOutputDelimited_2
												.writeNext(rowtFileOutputDelimited_2);

										tos_count_tFileOutputDelimited_2++;

										/**
										 * [tFileOutputDelimited_2 main ] stop
										 */

									} // End of branch "dateparse"

									// end for
								}

							} // End of branch "g"

							/**
							 * [tMongoDBInput_2 end ] start
							 */

							currentComponent = "tMongoDBInput_2";

						}
					} finally {
						if (mongo_tMongoDBInput_2 != null) {
							mongo_tMongoDBInput_2.close();
						}
					}
					globalMap.put("tMongoDBInput_2_NB_LINE",
							nb_line_tMongoDBInput_2);

					ok_Hash.put("tMongoDBInput_2", true);
					end_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

					/**
					 * [tMongoDBInput_2 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					if (execStat) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tNormalize_1 end ] start
					 */

					currentComponent = "tNormalize_1";

					globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
					if (execStat) {
						runStat.updateStatOnConnection("g" + iterateId, 2, 0);
					}

					ok_Hash.put("tNormalize_1", true);
					end_Hash.put("tNormalize_1", System.currentTimeMillis());

					/**
					 * [tNormalize_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
				} // finally
				if (execStat) {
					runStat.updateStatOnConnection("dateparse" + iterateId, 2,
							0);
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;

		} catch (java.lang.Error error) {

			runStat.stopThreadStat();
			throw error;

		}

		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = null;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final c_3001_dump_xml c_3001_dump_xmlClass = new c_3001_dump_xml();

		int exitCode = c_3001_dump_xmlClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = c_3001_dump_xml.class
					.getClassLoader().getResourceAsStream(
							"bookworm/c_3001_dump_xml_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMongoDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMongoDBInput_2) {

			e_tMongoDBInput_2.printStackTrace();
			globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : c_3001_dump_xml");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 64566 characters generated by Talend Open Studio for Big Data on the 14
 * novembre 2013 19.02.43 CET
 ************************************************************************************************/
